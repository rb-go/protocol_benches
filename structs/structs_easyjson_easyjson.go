// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs(in *jlexer.Lexer, out *EasedYoutube) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "etag":
			out.Etag = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]EasedItems, 0, 1)
					} else {
						out.Items = []EasedItems{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 EasedItems
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kind":
			out.Kind = string(in.String())
		case "nextPageToken":
			out.NextPageToken = string(in.String())
		case "pageInfo":
			(out.PageInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs(out *jwriter.Writer, in EasedYoutube) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"etag\":"
		out.RawString(prefix[1:])
		out.String(string(in.Etag))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"nextPageToken\":"
		out.RawString(prefix)
		out.String(string(in.NextPageToken))
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		(in.PageInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedYoutube) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedYoutube) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedYoutube) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedYoutube) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs1(in *jlexer.Lexer, out *EasedThumbnailsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "width":
			out.Width = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs1(out *jwriter.Writer, in EasedThumbnailsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedThumbnailsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedThumbnailsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedThumbnailsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedThumbnailsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs1(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs2(in *jlexer.Lexer, out *EasedThumbnails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			(out.Default).UnmarshalEasyJSON(in)
		case "high":
			(out.High).UnmarshalEasyJSON(in)
		case "maxres":
			(out.Maxres).UnmarshalEasyJSON(in)
		case "medium":
			(out.Medium).UnmarshalEasyJSON(in)
		case "standard":
			(out.Standard).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs2(out *jwriter.Writer, in EasedThumbnails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix[1:])
		(in.Default).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		(in.High).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"maxres\":"
		out.RawString(prefix)
		(in.Maxres).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"medium\":"
		out.RawString(prefix)
		(in.Medium).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"standard\":"
		out.RawString(prefix)
		(in.Standard).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedThumbnails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedThumbnails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedThumbnails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedThumbnails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs2(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs3(in *jlexer.Lexer, out *EasedSnippet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categoryId":
			out.CategoryID = string(in.String())
		case "channelId":
			out.ChannelID = string(in.String())
		case "channelTitle":
			out.ChannelTitle = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "liveBroadcastContent":
			out.LiveBroadcastContent = string(in.String())
		case "localized":
			(out.Localized).UnmarshalEasyJSON(in)
		case "publishedAt":
			out.PublishedAt = string(in.String())
		case "thumbnails":
			(out.Thumbnails).UnmarshalEasyJSON(in)
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs3(out *jwriter.Writer, in EasedSnippet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categoryId\":"
		out.RawString(prefix[1:])
		out.String(string(in.CategoryID))
	}
	{
		const prefix string = ",\"channelId\":"
		out.RawString(prefix)
		out.String(string(in.ChannelID))
	}
	{
		const prefix string = ",\"channelTitle\":"
		out.RawString(prefix)
		out.String(string(in.ChannelTitle))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"liveBroadcastContent\":"
		out.RawString(prefix)
		out.String(string(in.LiveBroadcastContent))
	}
	{
		const prefix string = ",\"localized\":"
		out.RawString(prefix)
		(in.Localized).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"publishedAt\":"
		out.RawString(prefix)
		out.String(string(in.PublishedAt))
	}
	{
		const prefix string = ",\"thumbnails\":"
		out.RawString(prefix)
		(in.Thumbnails).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedSnippet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedSnippet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedSnippet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedSnippet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs3(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs4(in *jlexer.Lexer, out *EasedPageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resultsPerPage":
			out.ResultsPerPage = int(in.Int())
		case "totalResults":
			out.TotalResults = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs4(out *jwriter.Writer, in EasedPageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resultsPerPage\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ResultsPerPage))
	}
	{
		const prefix string = ",\"totalResults\":"
		out.RawString(prefix)
		out.Int(int(in.TotalResults))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedPageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedPageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedPageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedPageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs4(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs5(in *jlexer.Lexer, out *EasedLocalized) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs5(out *jwriter.Writer, in EasedLocalized) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedLocalized) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedLocalized) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedLocalized) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedLocalized) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs5(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs6(in *jlexer.Lexer, out *EasedJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aliceblue":
			out.Aliceblue = string(in.String())
		case "antiquewhite":
			out.Antiquewhite = string(in.String())
		case "aqua":
			out.Aqua = string(in.String())
		case "aquamarine":
			out.Aquamarine = string(in.String())
		case "azure":
			out.Azure = string(in.String())
		case "beige":
			out.Beige = string(in.String())
		case "bisque":
			out.Bisque = string(in.String())
		case "black":
			out.Black = string(in.String())
		case "blanchedalmond":
			out.Blanchedalmond = string(in.String())
		case "blue":
			out.Blue = string(in.String())
		case "blueviolet":
			out.Blueviolet = string(in.String())
		case "brown":
			out.Brown = string(in.String())
		case "burlywood":
			out.Burlywood = string(in.String())
		case "cadetblue":
			out.Cadetblue = string(in.String())
		case "chartreuse":
			out.Chartreuse = string(in.String())
		case "chocolate":
			out.Chocolate = string(in.String())
		case "coral":
			out.Coral = string(in.String())
		case "cornflowerblue":
			out.Cornflowerblue = string(in.String())
		case "cornsilk":
			out.Cornsilk = string(in.String())
		case "crimson":
			out.Crimson = string(in.String())
		case "cyan":
			out.Cyan = string(in.String())
		case "darkblue":
			out.Darkblue = string(in.String())
		case "darkcyan":
			out.Darkcyan = string(in.String())
		case "darkgoldenrod":
			out.Darkgoldenrod = string(in.String())
		case "darkgray":
			out.Darkgray = string(in.String())
		case "darkgreen":
			out.Darkgreen = string(in.String())
		case "darkgrey":
			out.Darkgrey = string(in.String())
		case "darkkhaki":
			out.Darkkhaki = string(in.String())
		case "darkmagenta":
			out.Darkmagenta = string(in.String())
		case "darkolivegreen":
			out.Darkolivegreen = string(in.String())
		case "darkorange":
			out.Darkorange = string(in.String())
		case "darkorchid":
			out.Darkorchid = string(in.String())
		case "darkred":
			out.Darkred = string(in.String())
		case "darksalmon":
			out.Darksalmon = string(in.String())
		case "darkseagreen":
			out.Darkseagreen = string(in.String())
		case "darkslateblue":
			out.Darkslateblue = string(in.String())
		case "darkslategray":
			out.Darkslategray = string(in.String())
		case "darkslategrey":
			out.Darkslategrey = string(in.String())
		case "darkturquoise":
			out.Darkturquoise = string(in.String())
		case "darkviolet":
			out.Darkviolet = string(in.String())
		case "deeppink":
			out.Deeppink = string(in.String())
		case "deepskyblue":
			out.Deepskyblue = string(in.String())
		case "dimgray":
			out.Dimgray = string(in.String())
		case "dimgrey":
			out.Dimgrey = string(in.String())
		case "dodgerblue":
			out.Dodgerblue = string(in.String())
		case "firebrick":
			out.Firebrick = string(in.String())
		case "floralwhite":
			out.Floralwhite = string(in.String())
		case "forestgreen":
			out.Forestgreen = string(in.String())
		case "fuchsia":
			out.Fuchsia = string(in.String())
		case "gainsboro":
			out.Gainsboro = string(in.String())
		case "ghostwhite":
			out.Ghostwhite = string(in.String())
		case "gold":
			out.Gold = string(in.String())
		case "goldenrod":
			out.Goldenrod = string(in.String())
		case "gray":
			out.Gray = string(in.String())
		case "green":
			out.Green = string(in.String())
		case "greenyellow":
			out.Greenyellow = string(in.String())
		case "grey":
			out.Grey = string(in.String())
		case "honeydew":
			out.Honeydew = string(in.String())
		case "hotpink":
			out.Hotpink = string(in.String())
		case "indianred":
			out.Indianred = string(in.String())
		case "indigo":
			out.Indigo = string(in.String())
		case "ivory":
			out.Ivory = string(in.String())
		case "khaki":
			out.Khaki = string(in.String())
		case "lavender":
			out.Lavender = string(in.String())
		case "lavenderblush":
			out.Lavenderblush = string(in.String())
		case "lawngreen":
			out.Lawngreen = string(in.String())
		case "lemonchiffon":
			out.Lemonchiffon = string(in.String())
		case "lightblue":
			out.Lightblue = string(in.String())
		case "lightcoral":
			out.Lightcoral = string(in.String())
		case "lightcyan":
			out.Lightcyan = string(in.String())
		case "lightgoldenrodyellow":
			out.Lightgoldenrodyellow = string(in.String())
		case "lightgray":
			out.Lightgray = string(in.String())
		case "lightgreen":
			out.Lightgreen = string(in.String())
		case "lightgrey":
			out.Lightgrey = string(in.String())
		case "lightpink":
			out.Lightpink = string(in.String())
		case "lightsalmon":
			out.Lightsalmon = string(in.String())
		case "lightseagreen":
			out.Lightseagreen = string(in.String())
		case "lightskyblue":
			out.Lightskyblue = string(in.String())
		case "lightslategray":
			out.Lightslategray = string(in.String())
		case "lightslategrey":
			out.Lightslategrey = string(in.String())
		case "lightsteelblue":
			out.Lightsteelblue = string(in.String())
		case "lightyellow":
			out.Lightyellow = string(in.String())
		case "lime":
			out.Lime = string(in.String())
		case "limegreen":
			out.Limegreen = string(in.String())
		case "linen":
			out.Linen = string(in.String())
		case "magenta":
			out.Magenta = string(in.String())
		case "maroon":
			out.Maroon = string(in.String())
		case "mediumaquamarine":
			out.Mediumaquamarine = string(in.String())
		case "mediumblue":
			out.Mediumblue = string(in.String())
		case "mediumorchid":
			out.Mediumorchid = string(in.String())
		case "mediumpurple":
			out.Mediumpurple = string(in.String())
		case "mediumseagreen":
			out.Mediumseagreen = string(in.String())
		case "mediumslateblue":
			out.Mediumslateblue = string(in.String())
		case "mediumspringgreen":
			out.Mediumspringgreen = string(in.String())
		case "mediumturquoise":
			out.Mediumturquoise = string(in.String())
		case "mediumvioletred":
			out.Mediumvioletred = string(in.String())
		case "midnightblue":
			out.Midnightblue = string(in.String())
		case "mintcream":
			out.Mintcream = string(in.String())
		case "mistyrose":
			out.Mistyrose = string(in.String())
		case "moccasin":
			out.Moccasin = string(in.String())
		case "navajowhite":
			out.Navajowhite = string(in.String())
		case "navy":
			out.Navy = string(in.String())
		case "oldlace":
			out.Oldlace = string(in.String())
		case "olive":
			out.Olive = string(in.String())
		case "olivedrab":
			out.Olivedrab = string(in.String())
		case "orange":
			out.Orange = string(in.String())
		case "orangered":
			out.Orangered = string(in.String())
		case "orchid":
			out.Orchid = string(in.String())
		case "palegoldenrod":
			out.Palegoldenrod = string(in.String())
		case "palegreen":
			out.Palegreen = string(in.String())
		case "paleturquoise":
			out.Paleturquoise = string(in.String())
		case "palevioletred":
			out.Palevioletred = string(in.String())
		case "papayawhip":
			out.Papayawhip = string(in.String())
		case "peachpuff":
			out.Peachpuff = string(in.String())
		case "peru":
			out.Peru = string(in.String())
		case "pink":
			out.Pink = string(in.String())
		case "plum":
			out.Plum = string(in.String())
		case "powderblue":
			out.Powderblue = string(in.String())
		case "purple":
			out.Purple = string(in.String())
		case "rebeccapurple":
			out.Rebeccapurple = string(in.String())
		case "red":
			out.Red = string(in.String())
		case "rosybrown":
			out.Rosybrown = string(in.String())
		case "royalblue":
			out.Royalblue = string(in.String())
		case "saddlebrown":
			out.Saddlebrown = string(in.String())
		case "salmon":
			out.Salmon = string(in.String())
		case "sandybrown":
			out.Sandybrown = string(in.String())
		case "seagreen":
			out.Seagreen = string(in.String())
		case "seashell":
			out.Seashell = string(in.String())
		case "sienna":
			out.Sienna = string(in.String())
		case "silver":
			out.Silver = string(in.String())
		case "skyblue":
			out.Skyblue = string(in.String())
		case "slateblue":
			out.Slateblue = string(in.String())
		case "slategray":
			out.Slategray = string(in.String())
		case "slategrey":
			out.Slategrey = string(in.String())
		case "snow":
			out.Snow = string(in.String())
		case "springgreen":
			out.Springgreen = string(in.String())
		case "steelblue":
			out.Steelblue = string(in.String())
		case "tan":
			out.Tan = string(in.String())
		case "teal":
			out.Teal = string(in.String())
		case "thistle":
			out.Thistle = string(in.String())
		case "tomato":
			out.Tomato = string(in.String())
		case "turquoise":
			out.Turquoise = string(in.String())
		case "violet":
			out.Violet = string(in.String())
		case "wheat":
			out.Wheat = string(in.String())
		case "white":
			out.White = string(in.String())
		case "whitesmoke":
			out.Whitesmoke = string(in.String())
		case "yellow":
			out.Yellow = string(in.String())
		case "yellowgreen":
			out.Yellowgreen = string(in.String())
		case "youtube":
			(out.Youtube).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs6(out *jwriter.Writer, in EasedJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aliceblue\":"
		out.RawString(prefix[1:])
		out.String(string(in.Aliceblue))
	}
	{
		const prefix string = ",\"antiquewhite\":"
		out.RawString(prefix)
		out.String(string(in.Antiquewhite))
	}
	{
		const prefix string = ",\"aqua\":"
		out.RawString(prefix)
		out.String(string(in.Aqua))
	}
	{
		const prefix string = ",\"aquamarine\":"
		out.RawString(prefix)
		out.String(string(in.Aquamarine))
	}
	{
		const prefix string = ",\"azure\":"
		out.RawString(prefix)
		out.String(string(in.Azure))
	}
	{
		const prefix string = ",\"beige\":"
		out.RawString(prefix)
		out.String(string(in.Beige))
	}
	{
		const prefix string = ",\"bisque\":"
		out.RawString(prefix)
		out.String(string(in.Bisque))
	}
	{
		const prefix string = ",\"black\":"
		out.RawString(prefix)
		out.String(string(in.Black))
	}
	{
		const prefix string = ",\"blanchedalmond\":"
		out.RawString(prefix)
		out.String(string(in.Blanchedalmond))
	}
	{
		const prefix string = ",\"blue\":"
		out.RawString(prefix)
		out.String(string(in.Blue))
	}
	{
		const prefix string = ",\"blueviolet\":"
		out.RawString(prefix)
		out.String(string(in.Blueviolet))
	}
	{
		const prefix string = ",\"brown\":"
		out.RawString(prefix)
		out.String(string(in.Brown))
	}
	{
		const prefix string = ",\"burlywood\":"
		out.RawString(prefix)
		out.String(string(in.Burlywood))
	}
	{
		const prefix string = ",\"cadetblue\":"
		out.RawString(prefix)
		out.String(string(in.Cadetblue))
	}
	{
		const prefix string = ",\"chartreuse\":"
		out.RawString(prefix)
		out.String(string(in.Chartreuse))
	}
	{
		const prefix string = ",\"chocolate\":"
		out.RawString(prefix)
		out.String(string(in.Chocolate))
	}
	{
		const prefix string = ",\"coral\":"
		out.RawString(prefix)
		out.String(string(in.Coral))
	}
	{
		const prefix string = ",\"cornflowerblue\":"
		out.RawString(prefix)
		out.String(string(in.Cornflowerblue))
	}
	{
		const prefix string = ",\"cornsilk\":"
		out.RawString(prefix)
		out.String(string(in.Cornsilk))
	}
	{
		const prefix string = ",\"crimson\":"
		out.RawString(prefix)
		out.String(string(in.Crimson))
	}
	{
		const prefix string = ",\"cyan\":"
		out.RawString(prefix)
		out.String(string(in.Cyan))
	}
	{
		const prefix string = ",\"darkblue\":"
		out.RawString(prefix)
		out.String(string(in.Darkblue))
	}
	{
		const prefix string = ",\"darkcyan\":"
		out.RawString(prefix)
		out.String(string(in.Darkcyan))
	}
	{
		const prefix string = ",\"darkgoldenrod\":"
		out.RawString(prefix)
		out.String(string(in.Darkgoldenrod))
	}
	{
		const prefix string = ",\"darkgray\":"
		out.RawString(prefix)
		out.String(string(in.Darkgray))
	}
	{
		const prefix string = ",\"darkgreen\":"
		out.RawString(prefix)
		out.String(string(in.Darkgreen))
	}
	{
		const prefix string = ",\"darkgrey\":"
		out.RawString(prefix)
		out.String(string(in.Darkgrey))
	}
	{
		const prefix string = ",\"darkkhaki\":"
		out.RawString(prefix)
		out.String(string(in.Darkkhaki))
	}
	{
		const prefix string = ",\"darkmagenta\":"
		out.RawString(prefix)
		out.String(string(in.Darkmagenta))
	}
	{
		const prefix string = ",\"darkolivegreen\":"
		out.RawString(prefix)
		out.String(string(in.Darkolivegreen))
	}
	{
		const prefix string = ",\"darkorange\":"
		out.RawString(prefix)
		out.String(string(in.Darkorange))
	}
	{
		const prefix string = ",\"darkorchid\":"
		out.RawString(prefix)
		out.String(string(in.Darkorchid))
	}
	{
		const prefix string = ",\"darkred\":"
		out.RawString(prefix)
		out.String(string(in.Darkred))
	}
	{
		const prefix string = ",\"darksalmon\":"
		out.RawString(prefix)
		out.String(string(in.Darksalmon))
	}
	{
		const prefix string = ",\"darkseagreen\":"
		out.RawString(prefix)
		out.String(string(in.Darkseagreen))
	}
	{
		const prefix string = ",\"darkslateblue\":"
		out.RawString(prefix)
		out.String(string(in.Darkslateblue))
	}
	{
		const prefix string = ",\"darkslategray\":"
		out.RawString(prefix)
		out.String(string(in.Darkslategray))
	}
	{
		const prefix string = ",\"darkslategrey\":"
		out.RawString(prefix)
		out.String(string(in.Darkslategrey))
	}
	{
		const prefix string = ",\"darkturquoise\":"
		out.RawString(prefix)
		out.String(string(in.Darkturquoise))
	}
	{
		const prefix string = ",\"darkviolet\":"
		out.RawString(prefix)
		out.String(string(in.Darkviolet))
	}
	{
		const prefix string = ",\"deeppink\":"
		out.RawString(prefix)
		out.String(string(in.Deeppink))
	}
	{
		const prefix string = ",\"deepskyblue\":"
		out.RawString(prefix)
		out.String(string(in.Deepskyblue))
	}
	{
		const prefix string = ",\"dimgray\":"
		out.RawString(prefix)
		out.String(string(in.Dimgray))
	}
	{
		const prefix string = ",\"dimgrey\":"
		out.RawString(prefix)
		out.String(string(in.Dimgrey))
	}
	{
		const prefix string = ",\"dodgerblue\":"
		out.RawString(prefix)
		out.String(string(in.Dodgerblue))
	}
	{
		const prefix string = ",\"firebrick\":"
		out.RawString(prefix)
		out.String(string(in.Firebrick))
	}
	{
		const prefix string = ",\"floralwhite\":"
		out.RawString(prefix)
		out.String(string(in.Floralwhite))
	}
	{
		const prefix string = ",\"forestgreen\":"
		out.RawString(prefix)
		out.String(string(in.Forestgreen))
	}
	{
		const prefix string = ",\"fuchsia\":"
		out.RawString(prefix)
		out.String(string(in.Fuchsia))
	}
	{
		const prefix string = ",\"gainsboro\":"
		out.RawString(prefix)
		out.String(string(in.Gainsboro))
	}
	{
		const prefix string = ",\"ghostwhite\":"
		out.RawString(prefix)
		out.String(string(in.Ghostwhite))
	}
	{
		const prefix string = ",\"gold\":"
		out.RawString(prefix)
		out.String(string(in.Gold))
	}
	{
		const prefix string = ",\"goldenrod\":"
		out.RawString(prefix)
		out.String(string(in.Goldenrod))
	}
	{
		const prefix string = ",\"gray\":"
		out.RawString(prefix)
		out.String(string(in.Gray))
	}
	{
		const prefix string = ",\"green\":"
		out.RawString(prefix)
		out.String(string(in.Green))
	}
	{
		const prefix string = ",\"greenyellow\":"
		out.RawString(prefix)
		out.String(string(in.Greenyellow))
	}
	{
		const prefix string = ",\"grey\":"
		out.RawString(prefix)
		out.String(string(in.Grey))
	}
	{
		const prefix string = ",\"honeydew\":"
		out.RawString(prefix)
		out.String(string(in.Honeydew))
	}
	{
		const prefix string = ",\"hotpink\":"
		out.RawString(prefix)
		out.String(string(in.Hotpink))
	}
	{
		const prefix string = ",\"indianred\":"
		out.RawString(prefix)
		out.String(string(in.Indianred))
	}
	{
		const prefix string = ",\"indigo\":"
		out.RawString(prefix)
		out.String(string(in.Indigo))
	}
	{
		const prefix string = ",\"ivory\":"
		out.RawString(prefix)
		out.String(string(in.Ivory))
	}
	{
		const prefix string = ",\"khaki\":"
		out.RawString(prefix)
		out.String(string(in.Khaki))
	}
	{
		const prefix string = ",\"lavender\":"
		out.RawString(prefix)
		out.String(string(in.Lavender))
	}
	{
		const prefix string = ",\"lavenderblush\":"
		out.RawString(prefix)
		out.String(string(in.Lavenderblush))
	}
	{
		const prefix string = ",\"lawngreen\":"
		out.RawString(prefix)
		out.String(string(in.Lawngreen))
	}
	{
		const prefix string = ",\"lemonchiffon\":"
		out.RawString(prefix)
		out.String(string(in.Lemonchiffon))
	}
	{
		const prefix string = ",\"lightblue\":"
		out.RawString(prefix)
		out.String(string(in.Lightblue))
	}
	{
		const prefix string = ",\"lightcoral\":"
		out.RawString(prefix)
		out.String(string(in.Lightcoral))
	}
	{
		const prefix string = ",\"lightcyan\":"
		out.RawString(prefix)
		out.String(string(in.Lightcyan))
	}
	{
		const prefix string = ",\"lightgoldenrodyellow\":"
		out.RawString(prefix)
		out.String(string(in.Lightgoldenrodyellow))
	}
	{
		const prefix string = ",\"lightgray\":"
		out.RawString(prefix)
		out.String(string(in.Lightgray))
	}
	{
		const prefix string = ",\"lightgreen\":"
		out.RawString(prefix)
		out.String(string(in.Lightgreen))
	}
	{
		const prefix string = ",\"lightgrey\":"
		out.RawString(prefix)
		out.String(string(in.Lightgrey))
	}
	{
		const prefix string = ",\"lightpink\":"
		out.RawString(prefix)
		out.String(string(in.Lightpink))
	}
	{
		const prefix string = ",\"lightsalmon\":"
		out.RawString(prefix)
		out.String(string(in.Lightsalmon))
	}
	{
		const prefix string = ",\"lightseagreen\":"
		out.RawString(prefix)
		out.String(string(in.Lightseagreen))
	}
	{
		const prefix string = ",\"lightskyblue\":"
		out.RawString(prefix)
		out.String(string(in.Lightskyblue))
	}
	{
		const prefix string = ",\"lightslategray\":"
		out.RawString(prefix)
		out.String(string(in.Lightslategray))
	}
	{
		const prefix string = ",\"lightslategrey\":"
		out.RawString(prefix)
		out.String(string(in.Lightslategrey))
	}
	{
		const prefix string = ",\"lightsteelblue\":"
		out.RawString(prefix)
		out.String(string(in.Lightsteelblue))
	}
	{
		const prefix string = ",\"lightyellow\":"
		out.RawString(prefix)
		out.String(string(in.Lightyellow))
	}
	{
		const prefix string = ",\"lime\":"
		out.RawString(prefix)
		out.String(string(in.Lime))
	}
	{
		const prefix string = ",\"limegreen\":"
		out.RawString(prefix)
		out.String(string(in.Limegreen))
	}
	{
		const prefix string = ",\"linen\":"
		out.RawString(prefix)
		out.String(string(in.Linen))
	}
	{
		const prefix string = ",\"magenta\":"
		out.RawString(prefix)
		out.String(string(in.Magenta))
	}
	{
		const prefix string = ",\"maroon\":"
		out.RawString(prefix)
		out.String(string(in.Maroon))
	}
	{
		const prefix string = ",\"mediumaquamarine\":"
		out.RawString(prefix)
		out.String(string(in.Mediumaquamarine))
	}
	{
		const prefix string = ",\"mediumblue\":"
		out.RawString(prefix)
		out.String(string(in.Mediumblue))
	}
	{
		const prefix string = ",\"mediumorchid\":"
		out.RawString(prefix)
		out.String(string(in.Mediumorchid))
	}
	{
		const prefix string = ",\"mediumpurple\":"
		out.RawString(prefix)
		out.String(string(in.Mediumpurple))
	}
	{
		const prefix string = ",\"mediumseagreen\":"
		out.RawString(prefix)
		out.String(string(in.Mediumseagreen))
	}
	{
		const prefix string = ",\"mediumslateblue\":"
		out.RawString(prefix)
		out.String(string(in.Mediumslateblue))
	}
	{
		const prefix string = ",\"mediumspringgreen\":"
		out.RawString(prefix)
		out.String(string(in.Mediumspringgreen))
	}
	{
		const prefix string = ",\"mediumturquoise\":"
		out.RawString(prefix)
		out.String(string(in.Mediumturquoise))
	}
	{
		const prefix string = ",\"mediumvioletred\":"
		out.RawString(prefix)
		out.String(string(in.Mediumvioletred))
	}
	{
		const prefix string = ",\"midnightblue\":"
		out.RawString(prefix)
		out.String(string(in.Midnightblue))
	}
	{
		const prefix string = ",\"mintcream\":"
		out.RawString(prefix)
		out.String(string(in.Mintcream))
	}
	{
		const prefix string = ",\"mistyrose\":"
		out.RawString(prefix)
		out.String(string(in.Mistyrose))
	}
	{
		const prefix string = ",\"moccasin\":"
		out.RawString(prefix)
		out.String(string(in.Moccasin))
	}
	{
		const prefix string = ",\"navajowhite\":"
		out.RawString(prefix)
		out.String(string(in.Navajowhite))
	}
	{
		const prefix string = ",\"navy\":"
		out.RawString(prefix)
		out.String(string(in.Navy))
	}
	{
		const prefix string = ",\"oldlace\":"
		out.RawString(prefix)
		out.String(string(in.Oldlace))
	}
	{
		const prefix string = ",\"olive\":"
		out.RawString(prefix)
		out.String(string(in.Olive))
	}
	{
		const prefix string = ",\"olivedrab\":"
		out.RawString(prefix)
		out.String(string(in.Olivedrab))
	}
	{
		const prefix string = ",\"orange\":"
		out.RawString(prefix)
		out.String(string(in.Orange))
	}
	{
		const prefix string = ",\"orangered\":"
		out.RawString(prefix)
		out.String(string(in.Orangered))
	}
	{
		const prefix string = ",\"orchid\":"
		out.RawString(prefix)
		out.String(string(in.Orchid))
	}
	{
		const prefix string = ",\"palegoldenrod\":"
		out.RawString(prefix)
		out.String(string(in.Palegoldenrod))
	}
	{
		const prefix string = ",\"palegreen\":"
		out.RawString(prefix)
		out.String(string(in.Palegreen))
	}
	{
		const prefix string = ",\"paleturquoise\":"
		out.RawString(prefix)
		out.String(string(in.Paleturquoise))
	}
	{
		const prefix string = ",\"palevioletred\":"
		out.RawString(prefix)
		out.String(string(in.Palevioletred))
	}
	{
		const prefix string = ",\"papayawhip\":"
		out.RawString(prefix)
		out.String(string(in.Papayawhip))
	}
	{
		const prefix string = ",\"peachpuff\":"
		out.RawString(prefix)
		out.String(string(in.Peachpuff))
	}
	{
		const prefix string = ",\"peru\":"
		out.RawString(prefix)
		out.String(string(in.Peru))
	}
	{
		const prefix string = ",\"pink\":"
		out.RawString(prefix)
		out.String(string(in.Pink))
	}
	{
		const prefix string = ",\"plum\":"
		out.RawString(prefix)
		out.String(string(in.Plum))
	}
	{
		const prefix string = ",\"powderblue\":"
		out.RawString(prefix)
		out.String(string(in.Powderblue))
	}
	{
		const prefix string = ",\"purple\":"
		out.RawString(prefix)
		out.String(string(in.Purple))
	}
	{
		const prefix string = ",\"rebeccapurple\":"
		out.RawString(prefix)
		out.String(string(in.Rebeccapurple))
	}
	{
		const prefix string = ",\"red\":"
		out.RawString(prefix)
		out.String(string(in.Red))
	}
	{
		const prefix string = ",\"rosybrown\":"
		out.RawString(prefix)
		out.String(string(in.Rosybrown))
	}
	{
		const prefix string = ",\"royalblue\":"
		out.RawString(prefix)
		out.String(string(in.Royalblue))
	}
	{
		const prefix string = ",\"saddlebrown\":"
		out.RawString(prefix)
		out.String(string(in.Saddlebrown))
	}
	{
		const prefix string = ",\"salmon\":"
		out.RawString(prefix)
		out.String(string(in.Salmon))
	}
	{
		const prefix string = ",\"sandybrown\":"
		out.RawString(prefix)
		out.String(string(in.Sandybrown))
	}
	{
		const prefix string = ",\"seagreen\":"
		out.RawString(prefix)
		out.String(string(in.Seagreen))
	}
	{
		const prefix string = ",\"seashell\":"
		out.RawString(prefix)
		out.String(string(in.Seashell))
	}
	{
		const prefix string = ",\"sienna\":"
		out.RawString(prefix)
		out.String(string(in.Sienna))
	}
	{
		const prefix string = ",\"silver\":"
		out.RawString(prefix)
		out.String(string(in.Silver))
	}
	{
		const prefix string = ",\"skyblue\":"
		out.RawString(prefix)
		out.String(string(in.Skyblue))
	}
	{
		const prefix string = ",\"slateblue\":"
		out.RawString(prefix)
		out.String(string(in.Slateblue))
	}
	{
		const prefix string = ",\"slategray\":"
		out.RawString(prefix)
		out.String(string(in.Slategray))
	}
	{
		const prefix string = ",\"slategrey\":"
		out.RawString(prefix)
		out.String(string(in.Slategrey))
	}
	{
		const prefix string = ",\"snow\":"
		out.RawString(prefix)
		out.String(string(in.Snow))
	}
	{
		const prefix string = ",\"springgreen\":"
		out.RawString(prefix)
		out.String(string(in.Springgreen))
	}
	{
		const prefix string = ",\"steelblue\":"
		out.RawString(prefix)
		out.String(string(in.Steelblue))
	}
	{
		const prefix string = ",\"tan\":"
		out.RawString(prefix)
		out.String(string(in.Tan))
	}
	{
		const prefix string = ",\"teal\":"
		out.RawString(prefix)
		out.String(string(in.Teal))
	}
	{
		const prefix string = ",\"thistle\":"
		out.RawString(prefix)
		out.String(string(in.Thistle))
	}
	{
		const prefix string = ",\"tomato\":"
		out.RawString(prefix)
		out.String(string(in.Tomato))
	}
	{
		const prefix string = ",\"turquoise\":"
		out.RawString(prefix)
		out.String(string(in.Turquoise))
	}
	{
		const prefix string = ",\"violet\":"
		out.RawString(prefix)
		out.String(string(in.Violet))
	}
	{
		const prefix string = ",\"wheat\":"
		out.RawString(prefix)
		out.String(string(in.Wheat))
	}
	{
		const prefix string = ",\"white\":"
		out.RawString(prefix)
		out.String(string(in.White))
	}
	{
		const prefix string = ",\"whitesmoke\":"
		out.RawString(prefix)
		out.String(string(in.Whitesmoke))
	}
	{
		const prefix string = ",\"yellow\":"
		out.RawString(prefix)
		out.String(string(in.Yellow))
	}
	{
		const prefix string = ",\"yellowgreen\":"
		out.RawString(prefix)
		out.String(string(in.Yellowgreen))
	}
	{
		const prefix string = ",\"youtube\":"
		out.RawString(prefix)
		(in.Youtube).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs6(l, v)
}
func easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs7(in *jlexer.Lexer, out *EasedItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "etag":
			out.Etag = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "snippet":
			(out.Snippet).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs7(out *jwriter.Writer, in EasedItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"etag\":"
		out.RawString(prefix[1:])
		out.String(string(in.Etag))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"snippet\":"
		out.RawString(prefix)
		(in.Snippet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasedItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasedItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDa2265a9EncodeGithubComRiftbitProtocolBenchesStructs7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasedItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasedItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDa2265a9DecodeGithubComRiftbitProtocolBenchesStructs7(l, v)
}
